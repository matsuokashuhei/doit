---
name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable, beta]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.rust }}-
            ${{ runner.os }}-cargo-

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -W clippy::pedantic

      - name: Build
        run: cargo build --verbose

      - name: Run unit tests
        run: cargo test --lib --verbose

      - name: Run integration tests
        run: cargo test --test '*' --verbose

      - name: Run doc tests
        run: cargo test --doc --verbose

      - name: Test CLI functionality
        run: |
          cargo build --release
          ./target/release/pb --help
        shell: bash

  test-nightly:
    name: Test Suite (Nightly)
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
          components: rustfmt, clippy

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-nightly-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-nightly-
            ${{ runner.os }}-cargo-

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -W clippy::pedantic

      - name: Build
        run: cargo build --verbose

      - name: Run unit tests
        run: cargo test --lib --verbose

      - name: Run integration tests
        run: cargo test --test '*' --verbose

      - name: Run doc tests
        run: cargo test --doc --verbose

      - name: Test CLI functionality
        run: |
          cargo build --release
          ./target/release/pb --help
        shell: bash

  build:
    name: Build Artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: pb-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: pb-linux-aarch64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: pb-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: pb-macos-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: pb-windows-x86_64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-build-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-${{ matrix.target }}-
            ${{ runner.os }}-cargo-build-
            ${{ runner.os }}-cargo-

      - name: Install cross-compilation tools (Linux aarch64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build for target
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

      - name: Prepare binary artifact
        run: |
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            cp target/${{ matrix.target }}/release/pb.exe target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          else
            cp target/${{ matrix.target }}/release/pb target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          fi
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-coverage-
            ${{ runner.os }}-cargo-

      - name: Install cargo-tarpaulin
        run: |
          if ! command -v cargo-tarpaulin &> /dev/null; then
            cargo install --locked cargo-tarpaulin || cargo install cargo-tarpaulin
          fi

      - name: Generate code coverage
        run: |
          echo "Running cargo tarpaulin with 5-minute timeout..."
          cargo tarpaulin --verbose --workspace --timeout 300 --out xml --ignore-panics -- --skip test_startup_time
          echo "Coverage generation completed successfully"
          ls -la *.xml

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: cobertura.xml
          fail_ci_if_error: false

  workflow-validation:
    name: Validate Workflows
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate release workflow syntax
        run: |
          echo "Validating .github/workflows/release.yml syntax..."
          python3 -c "import yaml; yaml.safe_load(open('.github/workflows/release.yml'))"
          echo "✓ Release workflow YAML syntax is valid"

      - name: Validate workflow targets
        run: |
          echo "Checking if all expected targets are present in release workflow..."
          targets=(
            "x86_64-unknown-linux-gnu"
            "aarch64-unknown-linux-gnu" 
            "x86_64-apple-darwin"
            "aarch64-apple-darwin"
            "x86_64-pc-windows-msvc"
          )
          
          missing=0
          for target in "${targets[@]}"; do
            if ! grep -q "$target" .github/workflows/release.yml; then
              echo "✗ Missing target: $target"
              missing=1
            else
              echo "✓ Found target: $target"
            fi
          done
          
          if [ $missing -eq 1 ]; then
            echo "❌ Some required targets are missing from release workflow"
            exit 1
          fi
          
          echo "✅ All required targets are present in release workflow"

      - name: Check for redundant commands
        run: |
          echo "Checking for redundant strip commands..."
          if grep -q "strip target" .github/workflows/release.yml; then
            echo "⚠️  Found manual strip command - may be redundant"
            echo "   Check if Cargo.toml has 'strip = true' in [profile.release]"
            if grep -q "strip = true" Cargo.toml; then
              echo "   → Cargo.toml has 'strip = true', manual strip is redundant"
            fi
          else
            echo "✓ No redundant strip commands found"
          fi

      - name: Run release workflow validation script
        run: |
          chmod +x scripts/validate-release-workflow.sh
          ./scripts/validate-release-workflow.sh
